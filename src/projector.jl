
export OrthProjector, project!, project, decompose!, decompose

import Base: *



struct OrthProjector
    Nx::Int64
    r::Int64
    v::Array{Float64,2}
    P::Array{Float64,2}
    # Orthogonal determines whether or not the family of vectors v is orthonormal family
    ortho::Bool
end

function OrthProjector(v::Array{Float64,2}, ortho::Bool)
    Nx, r = size(v)
    @assert Nx >=r "There are more vector that the dimension of the space"
    if ortho == true
        P = v*v'
    else
        P = v*((v'*v)\v')
    end
    return OrthProjector(Nx, r, v, P, ortho)
end

# Projector generated by several columns vectors
function OrthProjector(v::Array{Float64,2})
    Nx, r = size(v)
    @assert Nx >=r "There are more vector that the dimension of the space"

    ortho = false
    if norm(v'*v-I)<1.0e-14
        ortho = true
        P = v*v'
    else
        P = v*((v'*v)\v')
    end
    return OrthProjector(Nx, r, v, P, ortho)
end


# Orthogonal Projector generated by one vector
function OrthProjector(v::Array{Float64,1})
    Nx = size(v, 1)
    r = 1

    ortho = false
    if norm(v'*v-I)<1.0e-14
        ortho = true
        P = v*v'
    else
        P = v*v'
        rmul!(P, 1/norm(v)^2)
    end
    return OrthProjector(Nx, r, reshape(v, (Nx,1)), P, ortho)
end

function project!(P::OrthProjector, xprime, x)
    @assert size(x,1) == P.Nx "Wrong dimension of the input vector"
    xprime .= P.P*x
    return xprime
end

(*)(P::OrthProjector, x) = project!(P, zero(x), x)

project!(P::OrthProjector, x) = project!(P, x, x)
project(P::OrthProjector, x) = project!(P, zero(x), x)


function decompose!(P::OrthProjector, xprime, xperp, x)
    @assert size(x,1) == P.Nx
    xprime .= P.P*x
    xperp .= x - xprime
    return xprime, xperp
end

decompose(P::OrthProjector, x) = decompose!(P, zero(x), zero(x), x)
